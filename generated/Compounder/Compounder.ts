// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Compound extends ethereum.Event {
  get params(): Compound__Params {
    return new Compound__Params(this);
  }
}

export class Compound__Params {
  _event: Compound;

  constructor(event: Compound) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fee0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Compounder__compoundResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFee0(): BigInt {
    return this.value0;
  }

  getFee1(): BigInt {
    return this.value1;
  }
}

export class Compounder extends ethereum.SmartContract {
  static bind(address: Address): Compounder {
    return new Compounder("Compounder", address);
  }

  callerBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "callerBalances",
      "callerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_callerBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "callerBalances",
      "callerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compound(tokenId: BigInt, paidIn0: boolean): Compounder__compoundResult {
    let result = super.call(
      "compound",
      "compound(uint256,bool):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBoolean(paidIn0)
      ]
    );

    return new Compounder__compoundResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_compound(
    tokenId: BigInt,
    paidIn0: boolean
  ): ethereum.CallResult<Compounder__compoundResult> {
    let result = super.tryCall(
      "compound",
      "compound(uint256,bool):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBoolean(paidIn0)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Compounder__compoundResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  grossCallerReward(): BigInt {
    let result = super.call(
      "grossCallerReward",
      "grossCallerReward():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_grossCallerReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "grossCallerReward",
      "grossCallerReward():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxIncreaseLiqSlippage(): BigInt {
    let result = super.call(
      "maxIncreaseLiqSlippage",
      "maxIncreaseLiqSlippage():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxIncreaseLiqSlippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIncreaseLiqSlippage",
      "maxIncreaseLiqSlippage():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolBalances(param0: Address): BigInt {
    let result = super.call(
      "protocolBalances",
      "protocolBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_protocolBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolBalances",
      "protocolBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolReward(): BigInt {
    let result = super.call("protocolReward", "protocolReward():(uint64)", []);

    return result[0].toBigInt();
  }

  try_protocolReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolReward",
      "protocolReward():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nonfungiblePositionManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CompoundCall extends ethereum.Call {
  get inputs(): CompoundCall__Inputs {
    return new CompoundCall__Inputs(this);
  }

  get outputs(): CompoundCall__Outputs {
    return new CompoundCall__Outputs(this);
  }
}

export class CompoundCall__Inputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get paidIn0(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class CompoundCall__Outputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }

  get fee0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCallerCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCallerCall__Inputs {
    return new WithdrawBalanceCallerCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCallerCall__Outputs {
    return new WithdrawBalanceCallerCall__Outputs(this);
  }
}

export class WithdrawBalanceCallerCall__Inputs {
  _call: WithdrawBalanceCallerCall;

  constructor(call: WithdrawBalanceCallerCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawBalanceCallerCall__Outputs {
  _call: WithdrawBalanceCallerCall;

  constructor(call: WithdrawBalanceCallerCall) {
    this._call = call;
  }
}

export class WithdrawBalanceProtocolCall extends ethereum.Call {
  get inputs(): WithdrawBalanceProtocolCall__Inputs {
    return new WithdrawBalanceProtocolCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceProtocolCall__Outputs {
    return new WithdrawBalanceProtocolCall__Outputs(this);
  }
}

export class WithdrawBalanceProtocolCall__Inputs {
  _call: WithdrawBalanceProtocolCall;

  constructor(call: WithdrawBalanceProtocolCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawBalanceProtocolCall__Outputs {
  _call: WithdrawBalanceProtocolCall;

  constructor(call: WithdrawBalanceProtocolCall) {
    this._call = call;
  }
}
