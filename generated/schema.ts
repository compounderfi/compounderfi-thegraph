// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Position", id.toString(), this);
    }
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenDeposit(): string {
    let value = this.get("tokenDeposit");
    return value!.toString();
  }

  set tokenDeposit(value: string) {
    this.set("tokenDeposit", Value.fromString(value));
  }

  get tokenWithdraw(): string | null {
    let value = this.get("tokenWithdraw");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenWithdraw(value: string | null) {
    if (!value) {
      this.unset("tokenWithdraw");
    } else {
      this.set("tokenWithdraw", Value.fromString(<string>value));
    }
  }

  get token0(): string | null {
    let value = this.get("token0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token0(value: string | null) {
    if (!value) {
      this.unset("token0");
    } else {
      this.set("token0", Value.fromString(<string>value));
    }
  }

  get token1(): string | null {
    let value = this.get("token1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token1(value: string | null) {
    if (!value) {
      this.unset("token1");
    } else {
      this.set("token1", Value.fromString(<string>value));
    }
  }

  get liquidityInital(): BigInt {
    let value = this.get("liquidityInital");
    return value!.toBigInt();
  }

  set liquidityInital(value: BigInt) {
    this.set("liquidityInital", Value.fromBigInt(value));
  }

  get liquidityCurrent(): BigInt {
    let value = this.get("liquidityCurrent");
    return value!.toBigInt();
  }

  set liquidityCurrent(value: BigInt) {
    this.set("liquidityCurrent", Value.fromBigInt(value));
  }
}

export class Compounded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Compounded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Compounded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Compounded", id.toString(), this);
    }
  }

  static load(id: string): Compounded | null {
    return changetype<Compounded | null>(store.get("Compounded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get caller(): Bytes | null {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set caller(value: Bytes | null) {
    if (!value) {
      this.unset("caller");
    } else {
      this.set("caller", Value.fromBytes(<Bytes>value));
    }
  }

  get amountAdded0(): BigInt | null {
    let value = this.get("amountAdded0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountAdded0(value: BigInt | null) {
    if (!value) {
      this.unset("amountAdded0");
    } else {
      this.set("amountAdded0", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountAdded1(): BigInt | null {
    let value = this.get("amountAdded1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountAdded1(value: BigInt | null) {
    if (!value) {
      this.unset("amountAdded1");
    } else {
      this.set("amountAdded1", Value.fromBigInt(<BigInt>value));
    }
  }

  get unclaimedFees0(): BigInt | null {
    let value = this.get("unclaimedFees0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unclaimedFees0(value: BigInt | null) {
    if (!value) {
      this.unset("unclaimedFees0");
    } else {
      this.set("unclaimedFees0", Value.fromBigInt(<BigInt>value));
    }
  }

  get unclaimedFees1(): BigInt | null {
    let value = this.get("unclaimedFees1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unclaimedFees1(value: BigInt | null) {
    if (!value) {
      this.unset("unclaimedFees1");
    } else {
      this.set("unclaimedFees1", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee0Caller(): BigInt | null {
    let value = this.get("fee0Caller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee0Caller(value: BigInt | null) {
    if (!value) {
      this.unset("fee0Caller");
    } else {
      this.set("fee0Caller", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee1Caller(): BigInt | null {
    let value = this.get("fee1Caller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee1Caller(value: BigInt | null) {
    if (!value) {
      this.unset("fee1Caller");
    } else {
      this.set("fee1Caller", Value.fromBigInt(<BigInt>value));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get token0(): string | null {
    let value = this.get("token0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token0(value: string | null) {
    if (!value) {
      this.unset("token0");
    } else {
      this.set("token0", Value.fromString(<string>value));
    }
  }

  get token1(): string | null {
    let value = this.get("token1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token1(value: string | null) {
    if (!value) {
      this.unset("token1");
    } else {
      this.set("token1", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidityAdded(): BigInt | null {
    let value = this.get("liquidityAdded");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityAdded(value: BigInt | null) {
    if (!value) {
      this.unset("liquidityAdded");
    } else {
      this.set("liquidityAdded", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidityPercentIncrease(): BigDecimal | null {
    let value = this.get("liquidityPercentIncrease");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityPercentIncrease(value: BigDecimal | null) {
    if (!value) {
      this.unset("liquidityPercentIncrease");
    } else {
      this.set(
        "liquidityPercentIncrease",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isApprovedForAll(): boolean {
    let value = this.get("isApprovedForAll");
    return value!.toBoolean();
  }

  set isApprovedForAll(value: boolean) {
    this.set("isApprovedForAll", Value.fromBoolean(value));
  }
}
